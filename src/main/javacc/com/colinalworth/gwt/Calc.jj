//tutorial from http://www.cs.rit.edu/~ats/java/html/skript/8_JavaCC.htmld/

// based on examples by Chuck McManis
// recognize arithmetic expressions

options
{
  STATIC = false;
}

PARSER_BEGIN(Calc)		// must define parser class
package com.colinalworth.gwt.calc.shared;
  public class Calc {
    @com.colinalworth.gwt.GwtIncompatible("sorry, dont want to reference System.in in GWT, and certainly not System.exit")
    public static void main (String args []) {
      Calc parser = new Calc(System.in);
      for (;;)
	try {
	  if (parser.expr() == -1)
	    System.exit(0);
	} catch (Exception e) {
	  e.printStackTrace(); System.exit(1);
	}
    }
  }
PARSER_END(Calc)

SKIP:				// defines input to be ignored
  { " " | "\r" | "\t"
  }

TOKEN:				// defines token names
  { < EOL: "\n" >
  | < CONSTANT: ( <DIGIT> )+ >	// re: 1 or more
  | < #DIGIT: ["0" - "9"] >	// private re
  }

int expr():			// expr: sum \n
  { int val; }				// -1 at eof, 0 at eol
  { val = sum() <EOL>	{ return val; }
  }

int sum() throws NumberFormatException:		// sum: product { +- product }
  { int s, r; }					// returns value
  { s = product()
    ( "+" r = product()	{ s += r; }
    | "-" r = product()	{ s -= r; }
    )*			{ return s; }
  }

int product() throws NumberFormatException:	// product: term { *%/ term }
  { int p, r;}					// returns value
  { p = term()
    ( "*" r = term()	{ p *= r; }
    | "%" r = term()	{ p %= r; }
    | "/" r = term()	{ p /= r; }
    )*			{ return p; }
  }

int term() throws NumberFormatException:
				// term: +term | -term | (sum) | number
  { int t; }			// returns value
  { "+" t = term()	{ return t; }
  | "-" t = term()	{ return -t; }
  | "(" t = sum() ")"	{ return t; }
  | <CONSTANT>		{ return Integer.parseInt(token.image); }
  }
